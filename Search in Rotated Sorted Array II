class Solution {
public:
    int find_pivot(vector<int>nums,int l,int r){
        while(l<r){   
            while(l<r and nums[l]==nums[l+1]){
                 l++;
            }
            while(r>l and nums[r]==nums[r-1]){
                r--;
            }
             if(l==r){
                 return l;
             }
            int mid=(l+r)>>1;
            if(nums[mid]>nums[r]){
                l=mid+1;
            }else{
                r=mid;
            }
        }
        return l;
    }
    bool find_target(vector<int>&nums,int l,int r,int target){
        while(l<=r){
            int mid=(l+r)>>1;
            if(nums[mid]==target){
                return true;
            }else if(nums[mid]>target){
                r=mid-1;
            }else{
                l=mid+1;
            }
        }
        return false;
    }
    bool search(vector<int>& nums, int target) {
        int pivot=find_pivot(nums,0,nums.size()-1);
        cout<<pivot<<endl;
        return find_target(nums,0,pivot,target) || find_target(nums,pivot,nums.size()-1,target);
    }
};
